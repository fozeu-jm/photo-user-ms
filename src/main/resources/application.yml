server:
  #set port number to 0 to have the port number automatically set to random port which
  #is useful when multiple instances of the service are launched
  port: ${PORT:0}

eureka:
  instance:
    #unique instance ID to register different instances of application to eureka server
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
    prefer-ip-address: true
  client:
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8010/eureka

spring:
  config:
    import: "optional:configserver:http://localhost:8012"
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
  application:
    name: user-ms
  devtools:
    restart:
      enabled: true
  datasource:
    url: jdbc:mysql://localhost:3306/photoapp?useSSL=false&serverTimezone=UTC
    username: kwd-admin
    password: K@izer?4153!
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL57Dialect
        storage_engine: innodb
        format_sql: true
        generate_statistics: false
gateway:
  ip: 192.168.1.48
token:
  expiration_delay: 3600000 #one hour
  secret: Zuu-^@?eEpx@pg8j%Dj3W6rAEZm@44=JgcWJE$3pn_eUjA2s

logging.level.com.ffjm.photoapp.usermicroservice.clients.PhotoServiceClient: DEBUG
resilience4j:
  circuitbreaker:
    circuit-breaker-aspect-order: 1
    instances:
      photo-ms:
        failure-rate-threshold: 50 # when failure rate reaches set value the circuit breaker transitions to open state and starts short-circuiting requests
        automatic-transition-from-open-to-half-open-enabled: true #
        wait-duration-in-open-state: 10000ms
        sliding-window-type: COUNT_BASED
        sliding-window-size: 2 # if failure-rate-threshold % of sliding-window-size is reached then circuit transitions to open state
        minimum-number-of-calls: 1 # minimum number of call before calculating failure rate
        event-consumer-buffer-size: 10
  retry:
    retry-aspect-order: 2 # set higher priority for retry before circuit breaaking to fall back
    instances:
      photo-ms:
        max-attempts: 3
        wait-duration: 2s
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 5

management:
  health:
    circuitbreakers:
      enabled: true
  endpoint:
    health:
      show-details: always
      enabled: true
  endpoints:
    web:
      exposure:
        include: beans,health,routes,httptrace,mappings,circuitbreakerevents